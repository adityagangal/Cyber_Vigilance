import React, { useEffect, useState } from 'react'
import axios from 'axios';

import './Vulnerability.css'

const Vulnerability = () => {
  const [organizationName, setOrganizationName] = useState("");
  const [websiteUrl, setWebsiteUrl] = useState("");
  const [vulnerabilityData, setVulnerabilityData] = useState(null);
  const [errorMessage, setErrorMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isLoading1, setIsLoading1] = useState(false);
  const [urlCheckResult, setUrlCheckResult] = useState("");
  const [pulsesData, setpulsesData] = useState(null);

  const organizations = ['barclays', 'nvidia', 'microsoft', 'google'];
  const websiteUrls = ["google.com",'home.barclays','hitdesignworks.com','acceptchrist.net'];

  const handleChange = (event) => {
    setVulnerabilityData(null);
    setOrganizationName(event.target.value);
    setErrorMessage(""); // Clear error message on selection change
    console.log(organizationName);

    // handleVulnerabilityCheck();
  };

  // const handleChange1 = (event) => {
  //   // const { name, value } = event.target;
  //   // if (name === "organizationName") {
  //   //   setOrganizationName(value);
  //   // } else if (name === "websiteUrl") {
  //     setWebsiteUrl(value);
  //   // }
  //   setErrorMessage(""); 
  // };

  const handleChange1 = (event) => {
    const value = event.target.value; // Extract the selected value from the event
    setWebsiteUrl(value); // Update the websiteUrl state with the selected value
    setErrorMessage(""); // Clear any error message
  };

  useEffect(() => {
    // Call handleVulnerabilityCheck on initial render and after state change
    handleUrlCheck();
  }, [websiteUrl]);
  

  useEffect(() => {
    // Call handleVulnerabilityCheck on initial render and after state change
    handleVulnerabilityCheck();
  }, [organizationName]);

  const handleVulnerabilityCheck = async () => {
    // Clear previous results and set loading state
    // setVulnerabilityData(null);
    setUrlCheckResult("");
    setpulsesData(null);
    setIsLoading(true);

    if (!organizationName.trim()) {
      setErrorMessage("Please enter your organization name.");
      setIsLoading(false);
      return;
    }

    setErrorMessage("");

    try {
      let encodedOrgName = encodeURIComponent(organizationName);
      if (encodedOrgName === 'barclays') {
        encodedOrgName = 'amazon';
      }
      
      const response = await fetch(
        `https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=${encodedOrgName}`
      );

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }

      const data = await response.json();
      const actualData = data.vulnerabilities[0].cve.metrics.cvssMetricV2[0];
      setVulnerabilityData(actualData);
    } catch (error) {
      console.error("Error fetching vulnerabilities:", error);
      setErrorMessage("An error occurred while fetching vulnerabilities.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleUrlCheck = async () => {
    // Clear previous results and set loading state
    setUrlCheckResult("");
    setpulsesData(null);
    setIsLoading1(true);

    if (!websiteUrl.trim()) {
      setErrorMessage("Please enter a website URL.");
      setIsLoading1(false);
      return;
    }

    const API_KEY = '243db911efc183ef5463c8184f06a12e80810ebabbac3a6346a09e0af5f049aa ';
    const url = `https://otx.alienvault.com/api/v1/indicators/domain/${websiteUrl}/general`; // Dynamic URL
    const headers = { 'X-OTX-API-KEY': API_KEY };

    try {
      const response = await axios.get(url, headers);

      if (response.status === 200) {
        const data = response.data;
        setpulsesData(data.pulse_info);
        if (data["pulse_info"]["count"] > 0) {
          setUrlCheckResult("The URL is potentially malicious.");
        } else {
          setUrlCheckResult(
            "The URL is not identified as malicious according to AlienVault OTX data."
          );
        }
      } else {
        console.error("Error:", response.status);
        setErrorMessage(
          "Error checking URL. Please check your API key or network connection."
        );
      }
    } catch (error) {
      console.error("Error checking URL:", error);
      setErrorMessage(
        "Error checking URL. Please check your API key or network connection."
      );
    } finally {
      setIsLoading1(false);
    }
  };

  return (
    <div>
    <div className="info">
        <h1>Information</h1>
        <h4>Impact Score:</h4>

        <p>
          Represents the potential negative impact a successful exploit of a
          vulnerability could have on a system or organization. This impact is
          usually measured across three main categories: Confidentiality,
          Integrity, and Availability (CIA triad). Higher impact scores indicate
          a more severe potential consequence.
        </p>
        <br></br>

        <h4>Base Severity:</h4>

        <p>
          Reflects the inherent severity of a vulnerability based on its
          characteristics, independent of exploitability or specific
          environments. Common scoring systems like CVSS (Common Vulnerability
          Scoring System) use a numerical scale (e.g., 0.0-10.0) to represent
          base severity.
        </p>
        <br></br>
        <h4>Exploitability Score:</h4>

        <p>
          Assesses the ease with which a vulnerability can be exploited. Factors
          like required access level, complexity of attack, and availability of
          exploits are considered. A higher exploitability score suggests a more
          readily exploitable vulnerability.
        </p>
        <br></br>
        <h4>Base Score:</h4>

        <p>
          Often refers to the CVSS base score, calculated based on the base
          severity and exploitability scores. It reflects the overall severity
          of the vulnerability independent of specific environments.
        </p>
        <br></br>
        <h4>Availability Impact:</h4>

        <p>
          Specifically focuses on the potential impact on a system's
          availability if the vulnerability is exploited. This could involve
          complete system outages, data loss, or service disruptions.
        </p>
        <br></br>
        <h4>Pulse Count (OTX Specific):</h4>

        <p>
          In the context of AlienVault OTX (Open Threat Exchange), a pulse count
          refers to the number of indicators (URLs, domains, file hashes, etc.)
          associated with a specific pulse. Pulses are user-created collections
          of indicators related to threats or threat actors.
        </p>
        <br></br>
        <h4>TLP (Traffic Light Protocol):</h4>

        <p>
          A standardized framework for classifying information based on its
          disclosure restrictions. Different colors (e.g., white, green, amber,
          red) represent increasing levels of sensitivity.
        </p>
        <br></br>
        <h4>CVE (Common Vulnerabilities and Exposures):</h4>

        <p>
          A globally recognized system for identifying and cataloging security
          vulnerabilities. Each CVE ID uniquely identifies a specific
          vulnerability.
        </p>
        <br></br>
        <h4>Here's how these terms might be used together:</h4>

        <p>
          A vulnerability might have a high impact score due to its potential to
          disrupt critical systems (availability impact).
          <p>
            The base severity could be significant based on the vulnerability's
            characteristics.
          </p>
          <p>
            A low exploitability score might indicate a less readily exploitable
            vulnerability.
          </p>
          <p>
            The combined base score would then provide a general severity level.
          </p>
          <p>
            Information about the vulnerability might be shared with a TLP level
            of green (publicly available but limited distribution recommended).
          </p>
        </p>
      </div>
      <div className="organization-input-container spacing">
        <h3>Organization Name</h3>
        <select value={organizationName} onChange={handleChange}>
          <option value="">Select an Organization</option>
          {organizations.map((org) => (
            <option key={org} value={org}>
              {org}
            </option>
          ))}
        </select>
        {/* {errorMessage && <p className="error-message">{errorMessage}</p>} */}
        {/* <button onClick={handleVulnerabilityCheck}>Submit</button> */}
      </div>

      {isLoading && (
        <div className="loading-indicator organization-input-container">
          <p>Fetching vulnerability data...</p>
        </div>
      )}

      <div className="organization-input-container spacing">
        <h3>Organization Name</h3>
        <select value={organizationName} onChange={handleChange}>
          <option value="">Select an Organization</option>
          {organizations.map((org) => (
            <option key={org} value={org}>
              {org}
            </option>
          ))}
        </select>
        {/* {errorMessage && <p className="error-message">{errorMessage}</p>} */}
        {/* <button onClick={handleVulnerabilityCheck}>Submit</button> */}
      </div>

      {isLoading && (
        <div className="loading-indicator organization-input-container">
          <p>Fetching vulnerability data...</p>
        </div>
      )}

      {vulnerabilityData && (
        <div className="organization-input-container vulnerability-table-container">
          <h2>Vulnerability Results:</h2>
          <table className="vulnerability-table">
            <thead>
              <tr>
                <th>Metric</th>
                <th>Value</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Impact Score</td>
                <td>{vulnerabilityData.impactScore}</td>
              </tr>
              <tr>
                <td>Base Severity</td>
                <td>{vulnerabilityData.baseSeverity}</td>
              </tr>
              <tr>
                <td>Exploitability Score</td>
                <td>{vulnerabilityData.exploitabilityScore}</td>
              </tr>
              <tr>
                <td>Base Score</td>
                <td>{vulnerabilityData.cvssData.baseScore}</td>
              </tr>
              <tr>
                <td>Availability Impact</td>
                <td>{vulnerabilityData.cvssData.availabilityImpact}</td>
              </tr>
            </tbody>
          </table>
        </div>
      )}

      {/* <div className="url-check-form">
        <h3>Website Domain Name</h3>
        <input
          type="text"
          placeholder="Enter a website domain name"
          value={websiteUrl}
          name="websiteUrl"
          onChange={handleChange1}
        /> */}


        <div className="organization-input-container spacing">
  <h3>Website Domain Name</h3>
  <select
    value={websiteUrl}
    name="websiteUrl"
    onChange={handleChange1}
  >
    <option value="">Select a website domain name</option>
    {websiteUrls.map((url, index) => (
      <option key={index} value={url}>{url}</option>
    ))}
  </select>
</div>
      {isLoading1 && (
        <div className="loading-indicator organization-input-container">
          <p>Fetching the data...</p>
        </div>
      )}

        {/* <button onClick={handleUrlCheck} disabled={isLoading}>
          {isLoading1 ? "Checking..." : "Check URL"}
        </button> */}
        {urlCheckResult && (
          <div className="organization-input-container">
          <h2>{urlCheckResult}</h2>
            {urlCheckResult === "The URL is potentially malicious." && (
              <div className="vulnerability-results spacing1">
                <h3>Vulnerability Results:</h3>
                <table className="vulnerability-table">
                  <thead>
              <tr>
                <th>Metric</th>
                <th>Value</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Pulse Count</td>
                <td>{pulsesData.count}</td>
              </tr>
              <tr>
                <td>TLP</td>
                <td>{pulsesData.pulses[0].TLP}</td>
              </tr>
              <tr>
                <td>Common Vulnerabilities and Exposures</td>
                <td>{pulsesData.pulses[0].indicator_type_counts.CVE}</td>
              </tr>
            </tbody>
                </table>
              </div>
            )}
          </div>
        )}
      </div>

    // </div>
  );
};

export default Vulnerability


